<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sharedInstance]]></title>
  <link href="http://sharedinstance.net/atom.xml" rel="self"/>
  <link href="http://sharedinstance.net/"/>
  <updated>2015-02-15T18:25:54+10:30</updated>
  <id>http://sharedinstance.net/</id>
  <author>
    <name><![CDATA[sharedInstance]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up SSH via USB connection on Linux]]></title>
    <link href="http://sharedinstance.net/2015/02/setting-up-ssh-via-usb-connection-linux/"/>
    <updated>2015-02-15T10:06:18+10:30</updated>
    <id>http://sharedinstance.net/2015/02/setting-up-ssh-via-usb-connection-linux</id>
    <content type="html"><![CDATA[<p>This is a version of Aehmlo&rsquo;s original post, modified for Linux.</p>

<p>When developing tweaks (or making themes, for that matter), it is often annoying to wait for files to copy (and commands to execute) over Wi-Fi - it tends to be very slow and sometimes unreliable, and one must keep track of IP addresses and such (even if they use a hosts file to map custom hostnames) in order to accomplish it. This annoyance can be greatly relieved by creating a local tunnel over a USB connection to the target device, and using that to SSH to the device much more quickly and reliably. In this tutorial, we will cover how to set up your Linux PC (there are other posts for <a href="http://sharedinstance.net/2015/02/setting-up-ssh-via-usb-connection-win/">Windows</a> and <a href="http://sharedinstance.net/2014/12/setting-up-ssh-via-usb-connection/">OS X</a>) so that port 2222 is forwarded to port 22 on whatever device is plugged in.</p>

<!--more-->


<p>First things first, make sure you have a recent version of libimobiledevice installed, as well as its utilities. On Debian and Ubuntu, the package name is <code>libimobiledevice-utils</code>.</p>

<p>In a terminal, run the following command to start the tunneling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>iproxy <span class="m">2222</span> 22
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it!</p>

<p>Having this run all the time in the background is different depending on what daemon system your distro uses. If your distro uses Upstart, such as Ubuntu, create a file as root at <code>/etc/init/iproxy.conf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo nano /etc/init/iproxy.conf
</span></code></pre></td></tr></table></div></figure>


<p>Enter the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>start on runlevel <span class="o">[</span>2345<span class="o">]</span>
</span><span class='line'>stop on runlevel <span class="o">[</span>!2345<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>setuid nobody
</span><span class='line'>setgid nogroup
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> /usr/bin/iproxy <span class="m">2222</span> 22
</span></code></pre></td></tr></table></div></figure>


<p>Use <code>sudo start iproxy</code> to start it without having to reboot.</p>

<p>Take a look at the <a href="http://sharedinstance.net/2014/12/setting-up-ssh-via-usb-connection/">original OS X post</a> to find out how to use this with Theos, and to prevent a false security error if you plug in a different device.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up SSH via USB connection on Windows]]></title>
    <link href="http://sharedinstance.net/2015/02/setting-up-ssh-via-usb-connection-win/"/>
    <updated>2015-02-15T09:58:08+10:30</updated>
    <id>http://sharedinstance.net/2015/02/setting-up-ssh-via-usb-connection-win</id>
    <content type="html"><![CDATA[<p>This is a version of Aehmlo&rsquo;s original post, modified for Windows.</p>

<p>When developing tweaks (or making themes, for that matter), it is often annoying to wait for files to copy (and commands to execute) over Wi-Fi - it tends to be very slow and sometimes unreliable, and one must keep track of IP addresses and such (even if they use a hosts file to map custom hostnames) in order to accomplish it. This annoyance can be greatly relieved by creating a local tunnel over a USB connection to the target device, and using that to SSH to the device much more quickly and reliably. In this tutorial, we will cover how to set up your Windows PC (there are other posts for <a href="http://sharedinstance.net/2015/02/setting-up-ssh-via-usb-connection-linux/">Linux</a> and <a href="http://sharedinstance.net/2014/12/setting-up-ssh-via-usb-connection/">OS X</a>) so that port 2222 is forwarded to port 22 on whatever device is plugged in.</p>

<!--more-->


<p>First things first, download the client from its <a href="https://code.google.com/p/iphonetunnel-usbmuxconnectbyport/downloads/detail?name=itunnel_mux_rev71.zip">download page</a> (note that you will need Windows XP and iTunes 10.5 or later for the client to work). Extract this zip - make sure you extract both the executable and the dll.</p>

<p>In Command Prompt, <code>cd</code> to the folder you extracted the zip to and run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>itunnel_mux --iport <span class="m">22</span> --lport 2222
</span></code></pre></td></tr></table></div></figure>


<p>From now on, the relay we have set up will always be running the background once you log in. Try it out in PuTTY by connecting to SSH at localhost, port 2222.</p>

<p>If you use Cygwin, you can easily register this as a Windows service so it&rsquo;s always running. You will need to use the Cygwin setup from <a href="https://cygwin.com">cygwin.com</a> to install <em>cygrunsrv</em>, under the Admin category. Now, from a Cygwin shell run as an administrator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cygrunsrv -I iTunnel -p /cygdrive/c/path/to/itunnel_mux.exe -a <span class="s1">&#39;--iport 22 --lport 2222&#39;</span> -u <span class="s1">&#39;NETWORK SERVICE&#39;</span> -y <span class="s1">&#39;Apple Mobile Device&#39;</span>
</span><span class='line'>net start itunnel
</span></code></pre></td></tr></table></div></figure>


<p>This creates a service with the name <code>itunnel</code>, which will run itunnel_mux.exe with the provided arguments. It&rsquo;ll execute as Windows&#8217; built in <code>NetworkService</code> account, and requires the Apple Mobile Device service to be up and running before iTunnel can start.</p>

<p>When you update Cygwin packages, you should execute <code>net stop itunnel</code> (again, as an administrator) before the update and <code>net start itunnel</code> after. Otherwise, you may be told to restart your computer to replace in-use files.</p>

<p>Take a look at the <a href="http://sharedinstance.net/2014/12/setting-up-ssh-via-usb-connection/">original OS X post</a> to find out how to use this with Theos, and to prevent a false security error if you plug in a different device.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up SSH via USB connection on OS X]]></title>
    <link href="http://sharedinstance.net/2014/12/setting-up-ssh-via-usb-connection/"/>
    <updated>2014-12-28T15:03:02+10:30</updated>
    <id>http://sharedinstance.net/2014/12/setting-up-ssh-via-usb-connection</id>
    <content type="html"><![CDATA[<p>When developing tweaks (or making themes, for that matter), it is often annoying to wait for files to copy (and commands to execute) over Wi-Fi - it tends to be very slow and sometimes unreliable, and one must keep track of IP addresses and such (even if they use a hosts file to map custom hostnames) in order to accomplish it. This annoyance can be greatly relieved by creating a local tunnel over a USB connection to the target device, and using that to SSH to the device much more quickly and reliably. In this tutorial, we will cover how to set up your Mac (not PC, sorry - I am not knowledgable enough to write on this) so that port 2222 is forwarded to port 22 on whatever device is plugged in. This service will be started automatically and will run in the background at all times, out of sight and out of mind.</p>

<!--more-->


<p>First things first, download the client from its <a href="https://code.google.com/p/iphonetunnel-usbmuxconnectbyport/downloads/detail?name=itnl_rev8.zip">download page</a> (note that you will need iTunes 10.5 or later for the client to work). Extract this zip, and move the extracted contents to <code>~/Library/Application Support/usbmuxd/</code> (or something else, if you wish, but make sure to change the path in the plist accordingly) - both <code>tunl</code> and <code>libmd.dylib</code>.</p>

<p>Now, create a new file named <code>net.sharedinstance.tcprelay.plist</code> in <code>~/Library/LaunchAgents</code>. Inside this file, put the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>net.sharedinstance.tcprelay<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>KeepAlive<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>NetworkState<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>/Users/USER/Library/Application Support/usbmuxd/itnl<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>--iport<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>22<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/string&gt;</span>--lport<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>2222<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>RunAtLoad<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;true/&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Be sure to replace USER above with your username (and if you put the executable elsewhere, make sure to change the first item in the ProgramArguments array to reflect that). Make sure that the itnl executable is, well, executable. Then, give the plist appropriate permissions - <code>chmod 0644 ~/Library/LaunchAgents/net.sharedinstance.tcprelay.plist</code>, and load this launch agent we have created - <code>launchctl load ~/Library/LaunchAgents/net.sharedinstance.tcprelay.plist</code>.</p>

<p>From now on, the relay we have set up will always be running the background once you log in. Try it out now with <code>ssh -p 2222 mobile@localhost</code>.</p>

<p>If you use this with multiple devices, you&rsquo;ll notice a problem: you&rsquo;ll get a scary host key changed warning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span><span class='line'>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
</span><span class='line'>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</span><span class='line'>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
</span><span class='line'>Someone could be eavesdropping on you right now (man-in-the-middle attack)!
</span><span class='line'>It is also possible that a host key has just been changed.
</span></code></pre></td></tr></table></div></figure>


<p>The trick to avoiding this is to set the known hosts file to <code>/dev/null</code> when you&rsquo;re connecting to localhost:2222. Create <code>~/.ssh/config</code> if you don&rsquo;t already have it and add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Host local
</span><span class='line'>  User root
</span><span class='line'>  HostName localhost
</span><span class='line'>  Port 2222
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  UserKnownHostsFile=/dev/null
</span></code></pre></td></tr></table></div></figure>


<p>You can now use <code>ssh local</code> no matter what device is plugged in.</p>

<p>To use this with Theos, you can export the IP to the host alias and the port to 2222:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">THEOS_DEVICE_IP</span><span class="o">=</span><span class="nb">local </span><span class="nv">THEOS_DEVICE_PORT</span><span class="o">=</span>2222
</span></code></pre></td></tr></table></div></figure>


<p>It would be ideal to also put this in your shell&rsquo;s profile script (<code>~/.bash_profile</code>, <code>~/.zshrc</code>, etc) so it&rsquo;s set by default and you don&rsquo;t have to worry about it.</p>

<p>Plug in a jailbroken iOS device, copy your SSH key to it if you haven&rsquo;t already&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh <span class="nb">local</span> <span class="s1">&#39;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&#39;</span> &lt; ~/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and enjoy the blazingly fast transfer speed! Isn&rsquo;t this much better than boring ol&#8217; Wi-Fi?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doing tweak settings the right way]]></title>
    <link href="http://sharedinstance.net/2014/11/settings-the-right-way/"/>
    <updated>2014-11-26T18:02:34+10:30</updated>
    <id>http://sharedinstance.net/2014/11/settings-the-right-way</id>
    <content type="html"><![CDATA[<p>You might have noticed that tweak settings have suddenly started acting different in iOS 8. This is because the <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/cfprefsd.8.html"><code>cfprefsd</code></a> concept from OS X (as long ago as in 10.8 Mountain Lion) has been brought across to iOS 8. When you change a setting now, the dictionary is no longer committed to disk immediately - rather, it&rsquo;s kept in memory by <code>cfprefsd</code> and only flushed to disk when the appropriate process (or <code>cfprefsd</code> itself) terminates. So with that in mind, how do you manage settings on iOS 8 now?</p>

<!--more-->


<p>It&rsquo;s actually really simple and I&rsquo;d argue a thousand times better than the hack all of us were using before this. First, you need to keep an instance of NSUserDefaults hanging around, and register your default preferences:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">kHBCBPreferencesDomain</span> <span class="o">=</span> <span class="s">@&quot;ws.hbang.cobalia&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">kHBCBPreferencesEnabledKey</span> <span class="o">=</span> <span class="s">@&quot;Enabled&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">kHBCBPreferencesSwitchesKey</span> <span class="o">=</span> <span class="s">@&quot;Switches&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">kHBCBPreferencesSectionLabelKey</span> <span class="o">=</span> <span class="s">@&quot;SectionLabel&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">kHBCBPreferencesSwitchLabelsKey</span> <span class="o">=</span> <span class="s">@&quot;SwitchLabels&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSUserDefaults</span> <span class="o">*</span><span class="n">userDefaults</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">init</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">userDefaults</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSUserDefaults</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">_initWithSuiteName</span><span class="p">:</span><span class="n">kHBCBPreferencesDomain</span> <span class="nl">container</span><span class="p">:[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="s">@&quot;/var/mobile&quot;</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">userDefaults</span> <span class="nl">registerDefaults</span><span class="p">:</span><span class="l">@{</span>
</span><span class='line'>      <span class="nl">kHBCBPreferencesEnabledKey</span><span class="p">:</span> <span class="m">@YES</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">kHBCBPreferencesSwitchesKey</span><span class="p">:</span> <span class="l">@[</span> <span class="cm">/* ... */</span> <span class="l">]</span>
</span><span class='line'>      <span class="nl">kHBCBPreferencesSectionLabelKey</span><span class="p">:</span> <span class="m">@YES</span><span class="p">,</span>
</span><span class='line'>      <span class="nl">kHBCBPreferencesSwitchLabelsKey</span><span class="p">:</span> <span class="m">@YES</span>
</span><span class='line'>  <span class="l">}</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll probably need to define this private init method in a category interface like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">NSUserDefaults</span> <span class="nl">(Private)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">_initWithSuiteName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">suiteName</span> <span class="nf">container:</span><span class="p">(</span><span class="bp">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">container</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I use constants for strings that shouldn&rsquo;t ever change - you don&rsquo;t need to but I&rsquo;d recommend it.</p>

<p>Now, it&rsquo;s as simple as a <code>[userDefaults boolForKey:@"Enabled"]</code> to grab a boolean, or <code>objectForKey:</code> for an Objective-C object, or any of the other methods <a href="https://developer.apple.com/Library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/index.html">the class supports</a>.</p>

<p>Easy! If you notice, you don&rsquo;t even need to watch for a traditional Darwin notification, nor do you need to define <code>PostNotification</code> on your preferences specifiers. The important thing to note is you need to directly call the methods on <code>NSUserDefaults</code> where ever you need to get a preference value in your code. You shouldn&rsquo;t store the preferences in separate global variables as you might have done traditionally since then you need a Darwin notification and a callback function to update them - ruining the simplicity of this solution.</p>

<p>But what about libraries like AppList or Flipswitch whose preferences API still write directly to the plist? The easiest thing you can do is a quick little trick to pass that back to <code>cfprefsd</code> to keep in memory. This is how I do it in <a href="https://github.com/hbang/Cobalia/blob/master/Tweak.xm">Cobalia</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">HBCBPreferencesChanged</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">preferences</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDictionary</span> <span class="nl">dictionaryWithContentsOfFile</span><span class="p">:[[[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSLibraryDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span><span class="s">@&quot;Preferences&quot;</span><span class="p">]</span> <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span><span class="n">kHBCBPreferencesDomain</span><span class="p">]</span> <span class="nl">stringByAppendingPathExtension</span><span class="p">:</span><span class="s">@&quot;plist&quot;</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">preferences</span><span class="p">[</span><span class="n">kHBCBPreferencesSwitchesKey</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">userDefaults</span> <span class="nl">setObject</span><span class="p">:</span><span class="n">preferences</span><span class="p">[</span><span class="n">kHBCBPreferencesSwitchesKey</span><span class="p">]</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">kHBCBPreferencesSwitchesKey</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">ctor</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">HBCBPreferencesChanged</span><span class="p">();</span>
</span><span class='line'>  <span class="n">CFNotificationCenterAddObserver</span><span class="p">(</span><span class="n">CFNotificationCenterGetDarwinNotifyCenter</span><span class="p">(),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="n">CFNotificationCallback</span><span class="p">)</span><span class="n">HBCBPreferencesChanged</span><span class="p">,</span> <span class="n">CFSTR</span><span class="p">(</span><span class="s">&quot;ws.hbang.cobalia/ReloadPrefs&quot;</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">kNilOptions</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously you&rsquo;ll also need to set the appropriate key in your preference specifiers for a Darwin notification to be posted with the name you provide.</p>

<p>If you&rsquo;d like to see what else people are using for their tweaks, there are a few others you can explore that are listed on the iPhone Dev Wiki&rsquo;s <a href="http://iphonedevwiki.net/index.php/Updating_extensions_for_iOS_8#Preference_saving">updating extensions for iOS 8</a> article. To me, this is the most simple and elegant, and almost exactly what you&rsquo;d ideally be using anyway in a standard iOS or OS X application - but you&rsquo;re of course allowed to use whichever looks best to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding simple toggles in the Settings root list]]></title>
    <link href="http://sharedinstance.net/2014/04/settings-root-toggles/"/>
    <updated>2014-04-18T11:04:22+09:30</updated>
    <id>http://sharedinstance.net/2014/04/settings-root-toggles</id>
    <content type="html"><![CDATA[<p>I just wanted to post a quick trick you can use to show a toggle in the root Settings list view.</p>

<p>If you generate a new preference bundle project with NIC and open <code>entry.plist</code>, you&rsquo;ll find this:</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>entry<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>bundle<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>TypeStatus<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>cell<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>PSLinkCell<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>detail<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>HBTSListController<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>icon<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>icon.png<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>isController<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>TypeStatus<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, the cells shown in the root of Settings courtesy of PreferenceLoader are customizable. You could slap your whole settings panel there if you wanted (but that&rsquo;s clearly not a good idea). What you <em>could</em> do, though, is use it for tweaks whose settings consist of nothing more than an &ldquo;enabled&rdquo; toggle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>entry<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>cell<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>PSSwitchCell<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>default<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>defaults<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>ws.hbang.typestatus<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>icon<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>TypeStatus.png<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>TypeStatus<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>key<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>Enabled<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>PostNotification<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>ws.hbang.typestatus/ReloadPrefs<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The icon can be dropped at <code>/Library/PreferenceLoader/Preferences/TypeStatus.png</code>. Unfortunately for themers, this means it can&rsquo;t be themed with WinterBoard.</p>

<p>Ok, that&rsquo;s easy enough, but I mention this because if one or two tweaks did this, it would look pretty odd. If more tweaks do this, it&rsquo;ll look completely normal. And, as Ryan Petrich noted in his <a href="http://rpetri.ch/wwjc2014/rpetrich_wwjc2014.pdf">WWJC talk</a> a few days ago, every tweak should have settings - even if it&rsquo;s just a single on/off switch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging memory issues in Substrate tweaks]]></title>
    <link href="http://sharedinstance.net/2014/02/debugging-memory-issues/"/>
    <updated>2014-02-10T00:00:00+10:30</updated>
    <id>http://sharedinstance.net/2014/02/debugging-memory-issues</id>
    <content type="html"><![CDATA[<p>Memory issues in MobileSubstrate tweaks are generally not very easy to debug. In the following text I&rsquo;m explaining some useful tools for finding overreleases and leaks in your own tweaks.</p>

<!--more-->


<p>One useful trick is to override <code>- (void)dealloc</code> in your subclasses and write a message to the syslog; that way you can make sure your objects are actually getting freed after usage. If dealloc is not getting called, you probably need to release that object once more. Keep in mind you should remove those logs for release builds of your tweaks. An easy way to do this is by adding this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#ifndef DEBUG</span>
</span><span class='line'><span class="cp">#define NSLog</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>On top of your tweaks makefile, add <code>DEBUG=1</code> to enable NSLogs, set it to zero or remove the line to disable all logs. You can also pass it to make at the command line, for instance: <code>make package install DEBUG=1</code>.</p>

<p>Another extremely useful trick if you experience crashes from use-after-free issues is to enable zombie objects. To enable those in any process you want (e.x. SpringBoard), ssh into your device, attach to the process with <code>cycript -p processname</code> first. Then declare _CFEnableZombies() in cycript like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">_CFEnableZombies</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Functor</span><span class="p">(</span><span class="nx">dlsym</span><span class="p">(</span><span class="nx">RTLD_DEFAULT</span><span class="p">,</span> <span class="s2">&quot;_CFEnableZombies&quot;</span><span class="p">),</span> <span class="s2">&quot;v&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can enable zombie objects simply by calling <code>_CFEnableZombies()</code>. Open up a syslog and keep and eye on it while the memory crash happens. You’ll see a message like this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Error&gt;: *** -[UIWindow methodSignatureForSelector:]: message sent to deallocated instance 0x162a7730`</span></code></pre></td></tr></table></div></figure>


<p>There we go! Now just search for the (in this example) <code>methodSignatureForSelector:</code> in your code and fix the memory crash!</p>

<p>Happy debugging!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Important: Update your tweaks to support arm64]]></title>
    <link href="http://sharedinstance.net/2013/12/how-to-support-arm64/"/>
    <updated>2013-12-24T00:00:00+10:30</updated>
    <id>http://sharedinstance.net/2013/12/how-to-support-arm64</id>
    <content type="html"><![CDATA[<p>The iPhone 5s, iPad Air and iPad mini (2nd generation) both run on a completely new processor architecture: arm64. If you haven&rsquo;t heard, this architecture is 64-bit, unlike the previous 32-bit architectures (armv6, armv7 and armv7s). Of course, these devices are still backwards compatible with the 32-bit architectures, but for 64-bit processes, <strong>dynamic libraries not compiled for arm64 will not be loaded into them.</strong></p>

<!--more-->


<p>However, updating your tweak to work on arm64 is fairly simple. It does come with one caveat, however: you are required to compile with the iOS 7.0 or newer SDK. If you&rsquo;re not using Xcode 5 or newer to compile your tweaks, you must do so in order to fully support these devices.</p>

<p>Unfortunately, if you&rsquo;re not using the official toolchain (included with Xcode) to build your tweaks, it is currently not possible to support arm64, since Apple is yet to release the source code for the open-source tools included with the Xcode 5 toolchain.</p>

<p>Before you start, be sure to <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaTouch64BitGuide/ConvertingYourAppto64-Bit/ConvertingYourAppto64-Bit.html">update your code for arm64</a>. Please also remember that Substrate is currently not updated for arm64, so you may want to hold off on doing this if you don&rsquo;t have an arm64 device to test with.</p>

<h2>The easy way</h2>

<p><strong style="font-size: 1.05em;">(If you don&rsquo;t need to support iOS 4.2.1 or older)</strong></p>

<p>The easiest way to fix this issue is simply to start using the iOS 7 SDK, and force theos to build your tweaks for both armv7 and arm64. If you have Xcode 5, you&rsquo;ve most likely already completed the first part (if not, head to the App Store and update Xcode!). The second part is still fairly easy: open your project&rsquo;s makefile and add this line above the first <code>include</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">ARCHS</span> <span class="o">=</span> armv7 arm64
</span></code></pre></td></tr></table></div></figure>


<p>Finally, download <a href="http://cdn.hbang.ws/dl/libsubstrate_arm64.dylib">this build of the libsubstrate.dylib stub</a> (contains armv6/armv7/armv7s/arm64 as well as i386 for OS X and x86_64 for iOS Simulator) and replace the existing file at $THEOS/lib/libsubstrate.dylib. That&rsquo;s it!</p>

<h2>The slightly more complex way</h2>

<p>It may not be viable to compile only against the iOS 7 SDK, since that might mean dropping support for iOS versions before 4.3.  If you have a preference bundle, wee app, or anything else that is loaded into an arm64 process, don&rsquo;t forget that you&rsquo;ll need to perform the same thing to its binaries too. There are tons of goodies available on <a href="http://iphonedevwiki.net/index.php/Updating_extensions_for_iOS_7#Tweaks_that_do_need_iOS_4.2.1_and_below_compatibility">the dev wiki</a> for this situation - and also has tips for issues that you may come across.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to build jailbreak packages for iOS on Windows]]></title>
    <link href="http://sharedinstance.net/2013/12/build-on-windows/"/>
    <updated>2013-12-24T00:00:00+10:30</updated>
    <id>http://sharedinstance.net/2013/12/build-on-windows</id>
    <content type="html"><![CDATA[<p>Want to develop jailbreak packages, but don&rsquo;t have a Mac? You could easily download a toolchain on your iPhone and build packages on there, but if you have a Windows computer, you could instead use the extra speed that a desktop CPU provides, thanks to <a href="http://coolstar.org">coolstar</a>&rsquo;s fork of theos and toolchain for Windows. At least Windows XP is required for this.</p>

<!--more-->


<h2>Cygwin</h2>

<p><a href="//cdn.hbang.ws/sharedinstance/wp-content/uploads/2013/12/Screen-Shot-2013-12-13-at-4.10.16-pm.png"><img src="//cdn.hbang.ws/sharedinstance/wp-content/uploads/2013/12/Screen-Shot-2013-12-13-at-4.10.16-pm-1024x766.png" alt="Cygwin website" /></a></p>

<p>The toolchain requires Cygwin, an awesome piece of software that provides a Unix environment on Windows. Grab the appropriate setup program for your system architecture from <a href="https://sourceware.org/cygwin/install.html">cygwin.com/install.html</a> and run it. You&rsquo;ll be greeted by the standard setup welcome page, followed by a request for where to download packages from. You&rsquo;ll want to stick with the default &ldquo;Install from Internet&rdquo;. Next your way through until you get a list of sources - you can pick any of them; preferably one closer to you. After downloading a list of packages, the setup maximizes to show you a full list of available packages:</p>

<p><a href="//cdn.hbang.ws/sharedinstance/wp-content/uploads/2013/12/Screen-Shot-2013-12-19-at-1.12.51-am.png"><img src="//cdn.hbang.ws/sharedinstance/wp-content/uploads/2013/12/Screen-Shot-2013-12-19-at-1.12.51-am.png" alt="Package list" /></a></p>

<p>Here&rsquo;s what you&rsquo;ll need to search for and install:</p>

<ul>
<li>git (under Devel)</li>
<li>ca-certificates (under Net)</li>
<li>make (under Devel)</li>
<li>perl (under Perl)</li>
<li>python (under Python)</li>
<li>openssh (under Net)</li>
</ul>


<p>Hit next two more times and let these packages, and the core Cygwin packages, install.</p>

<h2>Toolchain</h2>

<p>If you allowed it, the setup program dropped a shortcut to Cygwin Terminal on your desktop and/or Start menu. (If not, you can manually launch C:\cygwin\bin\mintty.exe.) Launch either one and you&rsquo;ll be greeted with a command line (bash):</p>

<p><a href="//cdn.hbang.ws/sharedinstance/wp-content/uploads/2013/12/Screen-Shot-2013-12-19-at-1.27.03-am.png"><img src="//cdn.hbang.ws/sharedinstance/wp-content/uploads/2013/12/Screen-Shot-2013-12-19-at-1.27.03-am.png" alt="Cygwin terminal" /></a></p>

<p><small>(I&rsquo;ve customised mine - yours will have a different font and size.)</small></p>

<p>From here, we&rsquo;ll create the directory where theos will live in, and clone it from coolstar&rsquo;s fork:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /opt
</span><span class='line'><span class="nb">cd</span> /opt
</span><span class='line'>git clone -b windows git://github.com/coolstar/theos.git
</span></code></pre></td></tr></table></div></figure>


<p>Next up is the toolchain itself, which will take a while&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone -b x86_64 git://github.com/coolstar/iOSToolchain4Win.git theos/toolchain/windows/iphone
</span></code></pre></td></tr></table></div></figure>


<p>If your copy of Windows is not 64-bit, replace <code>x86_64</code> with <code>master</code>.</p>

<h2>SDK</h2>

<p>Once that&rsquo;s done, you&rsquo;ll need to download an SDK. Legally, you can only do this by downloading an Xcode DMG image from Apple, so head to their <a href="https://developer.apple.com/downloads/index.action">developer downloads page</a> (login required) and download an Xcode version of your choice - try Xcode 5 for the iOS 7 SDK and 4.6.3 for iOS 6.1. Meanwhile, you&rsquo;ll need to download and install <a href="http://www.acutesystems.com">TransMac</a> so that you can extract files from the DMG.</p>

<p>Once the download is done, open the file. From there, click the DMG name in the sidebar, then navigate your way through to <code>Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs</code>. Right click <code>iPhoneOS6.1.sdk</code> and choose &ldquo;Copy To&rdquo;.</p>

<p><a href="//cdn.hbang.ws/sharedinstance/wp-content/uploads/2013/12/Screen-Shot-2013-12-24-at-6.53.11-pm.png"><img src="//cdn.hbang.ws/sharedinstance/wp-content/uploads/2013/12/Screen-Shot-2013-12-24-at-6.53.11-pm.png" alt="Extracting SDK" /></a></p>

<p><small>(I&rsquo;m using Xcode 4.4.1, but the instructions will always be the same.)</small></p>

<p>Here, you&rsquo;ll want to enter the path to Cygwin (unless you changed it, that&rsquo;s <code>C:\cygwin</code> on 32-bit Windows, or <code>C:\cygwin64</code> on 64-bit Windows), followed by the path to theos&#8217; SDK directory, and the directory name: <code>opt\theos\sdks\iPhoneOS6.1.sdk</code>. Hit OK and wait for the magic to happen.</p>

<h2>Try it out!</h2>

<p>Everything should work as you expect it to now. Let&rsquo;s try building a test tweak. Before you do, though, you should add theos environment variables to your <code>.bash_profile</code> (or equivalent for your shell). Open <code>C:\cygwin\home\...username...\.bash_profile</code> in your favorite editor and add this on the very last line, replacing the device name with your own device&rsquo;s, replacing spaces with dashes, or its IP address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">THEOS</span><span class="o">=</span>/opt/theos
</span><span class='line'><span class="nb">export </span><span class="nv">THEOS_DEVICE_IP</span><span class="o">=</span>kirbpad.local <span class="nv">THEOS_DEVICE_PORT</span><span class="o">=</span>22
</span></code></pre></td></tr></table></div></figure>


<p>Load this into the shell with <code>. ~/.bash_profile</code>, or close the terminal window and launch a new one. <code>cd</code> to where you would like to store your theos projects (note that your C: drive lives at <code>/cygdrive/c</code> under Cygwin), or just create a new directory for that under your cygwin home directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span>
</span><span class='line'>mkdir projects
</span><span class='line'><span class="nb">cd </span>projects
</span></code></pre></td></tr></table></div></figure>


<p>Now run <code>$THEOS/bin/nic.pl</code> to summon the NIC. Select a tweak and provide the rest of the info. Now open Tweak.xm and paste in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">%</span><span class="n">ctor</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;It works!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Get ready to <a href="http://gist.io/5128340">watch your syslog</a>, and run <code>make package install</code> inside the project directory. If all goes well, you&rsquo;ll see this somewhere among the other messages in the syslog:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Dec 19 00:33:20 kirbpad SpringBoard[52026] &lt;Notice&gt;: MS:Notice: Loading: /Library/MobileSubstrate/DynamicLibraries/TestTweak.dylib
</span><span class='line'>Dec 19 00:33:20 kirbpad SpringBoard[52026] &lt;Warning&gt;: It works!</span></code></pre></td></tr></table></div></figure>


<p>Have fun - and don&rsquo;t forget to thank <a href="http://coolstar.org">coolstar</a> for being awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Substrate tweaks in the iOS Simulator]]></title>
    <link href="http://sharedinstance.net/2013/10/running-tweaks-in-simulator/"/>
    <updated>2013-10-21T00:00:00+10:30</updated>
    <id>http://sharedinstance.net/2013/10/running-tweaks-in-simulator</id>
    <content type="html"><![CDATA[<p>With the iPhone 4 being the last iOS 7 device standing that can be jailbroken tethered, it&rsquo;s gotten much harder to test and update tweaks for the new firmware ahead of the untethered jailbreak release.</p>

<p>But there&rsquo;s still a way to do this if you&rsquo;re on a Mac. The iOS Simulator is basically already jailbroken, in the sense that you can access its filesystem and not all security policies are enforced. Therefore you can test your SpringBoard tweaks on iOS 7 with the simulator.</p>

<!--more-->


<p>Do keep in mind that this will only work with tweaks that only need to load into SpringBoard or other daemons. If you want to test a tweak inside apps, unfortunately you&rsquo;ll need to wait for a proper Substrate for OS X release that can do this.</p>

<h3>Installing</h3>

<p>First, you need to install Substrate. The binaries in the Substrate package in Cydia (except for MobileSafety) are compiled for both armv6 and i386/x86_64, so you can simply download, extract, and copy the files out of the package like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://apt.saurik.com/debs/mobilesubstrate_0.9.4001_iphoneos-arm.deb
</span><span class='line'>mkdir substrate
</span><span class='line'>dpkg-deb -x mobilesubstrate_0.9.4001_iphoneos-arm.deb substrate
</span><span class='line'>sudo mv substrate/Library/Frameworks/CydiaSubstrate.framework /Library/Frameworks/CydiaSubstrate.framework
</span><span class='line'>sudo mv substrate/Library/MobileSubstrate /Library/MobileSubstrate
</span><span class='line'>sudo mv substrate/usr/lib/* /usr/lib
</span></code></pre></td></tr></table></div></figure>


<h3>Injecting</h3>

<p>Awesome, now we need to get it to inject into the iOS Simulator. As of iOS 7, SpringBoard is launched by <code>launchd_sim</code> instead of directly by the simulator binary, so the hack that many people used in the past no longer works. However, you can still use Substrate by manually modifying LaunchDaemon plists found in the SDK.</p>

<p>Head over to the <code>LaunchDaemons</code> directory of the simulator&rsquo;s sysroot on your Mac:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/LaunchDaemons
</span></code></pre></td></tr></table></div></figure>


<p>Make a backup of <code>com.apple.SpringBoard.plist</code> somewhere other than the LaunchDaemons directory (otherwise SpringBoard will be loaded twice).</p>

<p>Now open the original plist in your favorite text or plist editor (Xcode has one built in). It&rsquo;s a binary plist, so if your text editor isn&rsquo;t cool enough to convert it to XML automatically, you can do so with <code>plutil -convert xml1 com.apple.SpringBoard.plist</code>. Add an <code>EnvironmentVariables</code> key, and set its value to a dictionary containing <code>DYLD_INSERT_LIBRARIES</code>, and set the value of that to the location of your dylib (<em>not MobileSubstrate.dylib</em>).</p>

<p>You should end up with something like this:</p>

<p><img src="http://cdn.hbang.ws/sharedinstance/wp-content/uploads/2013/10/Screen-Shot-2013-10-20-at-9.58.32-PM-1.png" alt="Modified com.apple.SpringBoard.plist" /></p>

<p>If you have the simulator running, close and re-launch it for the changes to apply.</p>

<h3>Environment</h3>

<p>Next, you must export <code>$IPHONE_SIMULATOR_ROOT</code>. Open <code>~/.bash_profile</code> (or the equivalent for your shell) and add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">IPHONE_SIMULATOR_ROOT</span><span class="o">=</span>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk
</span></code></pre></td></tr></table></div></figure>


<p>Load the changes into your shell by executing <code>. ~/.bash_profile</code>, or just close and launch a new shell.</p>

<p>Finally, you need to make a minor modification to theos, since the iOS 7 SDK&rsquo;s ld doesn&rsquo;t like one of the flags that theos passes to it. Open <code>$THEOS/makefiles/targets/Darwin/simulator.mk</code> in your editor, and find the following line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">_TARGET_OSX_VERSION_FLAG</span> <span class="o">=</span> -mmacosx-version-min<span class="o">=</span><span class="k">$(if</span> <span class="k">$(</span>_TARGET_VERSION_GE_4_0<span class="k">)</span>,10.6,10.5<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Replace it with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">_TARGET_VERSION_GE_7_0</span> <span class="o">=</span> <span class="k">$(</span>call __simplify,_TARGET_VERSION_GE_7_0,<span class="k">$(</span>shell <span class="k">$(</span>THEOS_BIN_PATH<span class="k">)</span>/vercmp.pl <span class="k">$(</span>_THEOS_TARGET_SDK_VERSION<span class="k">)</span> ge 7.0<span class="k">))</span>
</span><span class='line'><span class="nv">_TARGET_OSX_VERSION_FLAG</span> <span class="o">=</span> <span class="k">$(if</span> <span class="k">$(</span>_TARGET_VERSION_GE_7_0<span class="k">)</span>,-miphoneos-version-min<span class="o">=</span>7.0,-mmacosx-version-min<span class="o">=</span><span class="k">$(if</span> <span class="k">$(</span>_TARGET_VERSION_GE_4_0<span class="k">)</span>,10.6,10.5<span class="k">))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Linking</h3>

<p>Your copy of <code>libsubstrate.dylib</code> won&rsquo;t be able to be linked against, since it doesn&rsquo;t have a slice for the iOS Simulator platform. You can download a version that does like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv <span class="nv">$THEOS</span>/lib/libsubstrate.dylib <span class="nv">$THEOS</span>/lib/libsubstrate.dylib_
</span><span class='line'>wget http://cdn.hbang.ws/dl/libsubstrate_ios7sim.dylib -O <span class="nv">$THEOS</span>/lib/libsubstrate.dylib
</span></code></pre></td></tr></table></div></figure>


<p>Note that this only contains an x86_64 slice for OS X, since it isn&rsquo;t possible to have multiple i386 slices. However, you won&rsquo;t need to worry about this unless you have OS X projects that depend on OS X 10.5 or older.</p>

<h3>Compiling</h3>

<p>Simply compiling tweaks like normal is not enough for them to work in the simulator: in this case, they&rsquo;ll be compiled for the ARM architecture, and your Mac runs on Intel. It&rsquo;s fairly simple to do this with theos, however, by setting the <code>TARGET</code> variable.</p>

<p>If you don&rsquo;t already have <code>TARGET</code> set in your makefile, at the top of your makefile, add this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">TARGET</span> <span class="o">=</span> simulator
</span></code></pre></td></tr></table></div></figure>


<p>If you do, set the target parameter to <code>simulator</code>. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">TARGET</span> <span class="o">=</span> simulator:clang:7.0
</span></code></pre></td></tr></table></div></figure>


<p><small>(Check out <a href="https://github.com/theiostream/theos-ref/blob/master/2_1_1_5_0_TARGET.md">theiostream&rsquo;s documentation on TARGET</a> if you haven&rsquo;t tried it before.)</small></p>

<h3>That&rsquo;s it!</h3>

<p>You can now run make, ignoring the warning that ld whines about. SpringBoard will not be restarted for you, like usual – you must execute <code>killall SpringBoard</code> yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome to sharedInstance!]]></title>
    <link href="http://sharedinstance.net/2013/10/welcome-to-sharedinstance/"/>
    <updated>2013-10-10T00:00:00+10:30</updated>
    <id>http://sharedinstance.net/2013/10/welcome-to-sharedinstance</id>
    <content type="html"><![CDATA[<p>Welcome to sharedInstance!</p>

<p>Here you can access the latest blog posts from the perspective of various Jailbreak Tweak Developers, iOS Hackers and many more.</p>

<p>You can expect tweak reviews, some tutorials and also tips that’ll help you make better jailbreak tweaks.</p>

<!--more-->


<p>The reason for starting this blog is simple – popular jailbreak blogs tend to make lame posts in order to increase their traffic while sometimes giving us biased opinions on tweaks. As developers, we believe it’s better to know the accurate story instead of interpretations that could be inaccurate. Much love to <a href="http://unthreadedjb.github.io" title="dey r of TRU #JBrevue !!">unthreadebl00g</a> for opening our eyes to this.</p>

<p>Our core members consist of:</p>

<ul>
<li><a href="https://twitter.com/aehmlo">Aehmlo</a></li>
<li><a href="https://twitter.com/bensge">Bensge</a></li>
<li><a href="https://twitter.com/coolstarorg">CoolStar</a></li>
<li><a href="https://twitter.com/FTO2g">FTO</a></li>
<li><a href="https://twitter.com/idhanta">Idhanta</a></li>
<li><a href="https://twitter.com/thekirbylover">kirb</a></li>
</ul>


<p>If you want to get in touch with us, you can follow <a href="https://twitter.com/sharedinstance">@sharedInstance</a> on Twitter or email us at <a href="mailto:sharedinstance@gmail.com">sharedinstance@gmail.com</a>.</p>

<p>Thanks, and enjoy!</p>
]]></content>
  </entry>
  
</feed>
